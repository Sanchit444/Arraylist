using System;
using System.Collections.Generic;
using System.Security.Cryptography.X509Certificates;
public class Flight{
        public string flightId;
    public string source;
    public string destination;
    public DateTime arrival;
    public DateTime departure;
    public int journeytime;
    public double ticketcos;
    public int flightcapacity;
    public int totalbooked;
    public Flight(string flightId,string source,string destination,DateTime arrival,DateTime departure,int journeytime, double ticketcos,int flightcapacity,int totalbooked)
    {
        this.flightId = flightId;
        this.source = source;
        this.destination = destination;
        this.departure = departure;
        this.arrival = arrival;
        this.journeytime = journeytime;
        this.ticketcos = ticketcos;
        this.flightcapacity = flightcapacity;
        this.totalbooked = totalbooked;
    }
}
public class FlightManage
{
    public Dictionary<string,Flight> f;
    public FlightManage()
    {
        f = new Dictionary<string, Flight>();
    }
    public void AddFlight(string flightId,string source,string destination,DateTime arrival,DateTime departure,int journeytime, double ticketcos,int flightcapacity,int totalbooked)
    {
        Flight obj = new Flight(flightId,source,destination,arrival,departure,journeytime,ticketcos,flightcapacity,totalbooked);
        f.Add(flightId,obj);
    }
    public void RemoveFlight(string flightId)
    {
         if (f.ContainsKey(flightId))
        {
            f.Remove(flightId);
            Console.WriteLine($"Flight {flightId} removed successfully.");
        }
        else{
            Console.WriteLine($"Flights not found");
        }
    }
    public void BookTicketsByFlightId(string flightId,int ticket)
    {
        if(f.ContainsKey(flightId))
        {
            Flight obj = f[flightId];
            obj.totalbooked+=ticket;
        }
    }
    public void UpdateFlightCapacity(string flightId,int flightcapacity)
    {
        if(f.ContainsKey(flightId))
        {
            Flight obj = f[flightId];
            obj.flightcapacity=flightcapacity;
        }
    }
    public void  UpdateFlightArrival(string flightId,DateTime newarrival)
    {
         if(f.ContainsKey(flightId))
         {
            Flight obj = f[flightId];
            obj.arrival = newarrival;
         }
    }
    public void UpdateFilghtDeparture(string flightId, DateTime newdeparture)
    {
       if(f.ContainsKey(flightId))
         {
            Flight obj = f[flightId];
            obj.departure = newdeparture;
         }
    }
    public void GetAllFlightsWithGivenSource(string source)
    {
        foreach(var i in f.Values)
        {
            if(i.source == source)
            {
                Console.WriteLine($"{i.flightId}");
            }
        }
    }
    public void GetAllFlightsWithArrivalDateRange(DateTime startdate, DateTime enddate)
    {
        foreach(var i in f.Values)
        {
            if(i.arrival>= startdate && i.arrival<= enddate)
            {
                Console.WriteLine($"{i.flightId}");
            }
        }
    }
    public void FindReminaingCapacity(string flightId)
    {
        if(f.ContainsKey(flightId))
        {
            int r = f[flightId].flightcapacity;
            Console.WriteLine($"Remaining Capacity:{r}");
        }
    }
}
class Exp
{
    static void Main(String[] args)
    {
        FlightManage obj1 = new FlightManage();
        obj1.AddFlight("F1","Mumbai","Delhi", new DateTime(2024, 7, 1, 10, 0, 0), new DateTime(2024, 7, 1, 14, 0, 0), 6,500,50,40);
         obj1.AddFlight("F2","Rajkot","Pune", new DateTime(2024, 7, 1, 9, 0, 0), new DateTime(2024, 7, 1, 13, 0, 0), 6,500,40,30);
         obj1.GetAllFlightsWithGivenSource("Mumbai");
    }
}